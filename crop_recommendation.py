# -*- coding: utf-8 -*-
"""Crop_Recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1canoNUY0f0finuyqQzXf88hdWWqEQHr5
"""

import streamlit as st
import requests
import pandas as pd
import io
from PIL import Image
from io import BytesIO
import matplotlib.pyplot as plt
import seaborn as sns

# Add custom HTML for title and description
st.title("Crop Recommendation System")
st.markdown(
    """
    <h1 style="text-align:center;font-size:25px;padding:20px;">
        Welcome to the Crop Recommendation Analysis tool! ðŸŒ¾  
    This app helps you determine the best crops for specific regions and seasons based on historical data.
    </h1>
    """,
    unsafe_allow_html=True,
)

# Using single background image
st.markdown(
    """
    <style>
    body {
        background-image: url('https://drive.google.com/uc?id=1m7SMWjsST26U2pbz84TJ8SfTtC-3GrkP');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }
    </style>
    """,
    unsafe_allow_html=True,
)
st.write("If you see a background image, it means the image rendering works.")

# Option selection for the user
option = st.selectbox("Choose an option", ["Get Crop Information", "Get Region Information"])
st.write("Your selected option is:", option)

# Function to load data from Google Drive link
def load_data_from_drive(link):
    try:
        # Extracting file ID from Google Drive URL
        file_id = link.split('/')[-2]
        url = f'https://drive.google.com/uc?id={file_id}'
        response = requests.get(url)
        if response.status_code != 200:
            st.error("Failed to fetch data from the provided Google Drive link.")
            return pd.DataFrame()
        
        # Reading the CSV data
        data = pd.read_csv(io.StringIO(response.text))
        st.success("Data loaded successfully!")
        return data
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return pd.DataFrame()

# Load dataset from Google Drive
data_url = 'https://drive.google.com/uc?id=1XYvWxsYyEKkFt7VH1roZuBMtQHH8MnvG'
data = load_data_from_drive(data_url)

# Verify the dataset and required columns
required_columns = ['Crop', 'Production', 'Area', 'State', 'District', 'Season']
if not all(col in data.columns for col in required_columns):
    missing_columns = [col for col in required_columns if col not in data.columns]
    st.error(f"Missing required columns in the dataset: {missing_columns}")
else:
    # Data Preprocessing
    data.dropna(subset=['Crop', 'Production', 'Area'], inplace=True)

    # Option 1: Get Region Information (State -> District -> Season)
    if option == "Get Region Information":
        states = data['State'].unique()
        state = st.selectbox("Choose State", states)

        districts = data[data['State'] == state]['District'].unique()
        district = st.selectbox("Choose District", districts)

        seasons = data[(data['State'] == state) & (data['District'] == district)]['Season'].unique()
        season = st.selectbox("Select Season", seasons)

        filtered_data_region = data[(data['State'] == state) & 
                                     (data['District'] == district) & 
                                     (data['Season'] == season)]

        st.subheader("Crops Information for the selected Region and Season")
        st.dataframe(filtered_data_region)

        show_graph = st.checkbox("Show Graph")
        if show_graph:
            st.subheader("Graphical Representation")
            fig, ax = plt.subplots()
            sns.barplot(data=filtered_data_region, x="Crop", y="Area", ax=ax)
            st.pyplot(fig)

    # Option 2: Get Crop Information (Crop -> State)
    elif option == "Get Crop Information":
        crops = data['Crop'].unique()
        crop = st.selectbox("Choose Crop", crops)

        states_for_crop = data[data['Crop'] == crop]['State'].unique()
        state_for_crop = st.selectbox("Choose State", states_for_crop.tolist() + ["All of the above"])

        if state_for_crop != "All of the above":
            filtered_data_crop = data[(data['Crop'] == crop) & (data['State'] == state_for_crop)]

            st.subheader(f"Data for {crop} in {state_for_crop}")
            st.dataframe(filtered_data_crop)

            show_graph_crop = st.checkbox("Show Graph")
            if show_graph_crop:
                st.subheader("Graphical Representation")
                fig, ax = plt.subplots()
                sns.barplot(data=filtered_data_crop, x="District", y="Area", ax=ax)
                st.pyplot(fig)

