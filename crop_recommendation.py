# -*- coding: utf-8 -*-
"""Crop_Recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1canoNUY0f0finuyqQzXf88hdWWqEQHr5
"""

import streamlit as st
import requests
import pandas as pd
import io
from PIL import Image
from io import BytesIO
import matplotlib.pyplot as plt
import seaborn as sns

# Add custom HTML for title and description
st.title("Crop Recommendation System")
st.markdown(
    """
    <h1 style="text-align:center;font-size:25px;padding:20px;">
        Welcome to the Crop Recommendation Analysis tool! ðŸŒ¾  
    This app helps you determine the best crops for specific regions and seasons based on historical data.
    </h1>
    """,
    unsafe_allow_html=True,
)

# Using single background image
st.markdown(
    """
    <style>
    body {
        background-image: url('https://drive.google.com/uc?id=1m7SMWjsST26U2pbz84TJ8SfTtC-3GrkP');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }
    </style>
    """,
    unsafe_allow_html=True,
)


# Dropdowns and other inputs
option = st.selectbox("Choose an option", ["Get Crop Information", "Get Region Information"])
st.write("Your selected option is:", option)

# Function to load data from Google Drive link
def load_data_from_drive(link):
    # Extracting file ID from Google Drive URL
    file_id = link.split('/')[-2]
    url = f'https://drive.google.com/uc?id=1XYvWxsYyEKkFt7VH1roZuBMtQHH8MnvG'
    response = requests.get(url)
    return pd.read_csv(io.StringIO(response.text))

# Streamlit Interface
st.title("Crop Recommendation System")

# Load dataset from Google Drive (use the actual Google Drive link here)
data_url = 'https://drive.google.com/file/d/1XYvWxsYyEKkFt7VH1roZuBMtQHH8MnvG/view?usp=drive_link'  # Replace with your Google Drive link
data = load_data_from_drive(data_url)

# Data Preprocessing
data.dropna(subset=['Crop', 'Production', 'Area'], inplace=True)  # Removing NaN values in important columns

# Option 1: Get Region Information (State -> District -> Season)
if option == "Get Region Information":
    # State selection
    states = data['State'].unique()
    state = st.selectbox("Choose State", states)

    # District selection based on state
    districts = data[data['State'] == state]['District'].unique()
    district = st.selectbox("Choose District", districts)

    # Season selection based on district
    seasons = data[(data['State'] == state) & (data['District'] == district)]['Season'].unique()
    season = st.selectbox("Select Season", seasons)

    # Filter data based on the selected state, district, and season
    filtered_data_region = data[(data['State'] == state) &
                                 (data['District'] == district) &
                                 (data['Season'] == season)]

    # Display data in tabular format
    st.subheader("Crops Information for the selected Region and Season")
    st.dataframe(filtered_data_region)

    # Option to switch between tabular and graphical format
    show_graph = st.checkbox("Show Graph")
    if show_graph:
        st.subheader("Graphical Representation")
        fig, ax = plt.subplots()
        sns.barplot(data=filtered_data_region, x="Crop", y="Area", ax=ax)
        st.pyplot(fig)

# Option 2: Get Crop Information (Crop -> State)
elif option == "Get Crop Information":
    # Crop selection
    crops = data['Crop'].unique()
    crop = st.selectbox("Choose Crop", crops)

    # State selection based on crop
    states_for_crop = data[data['Crop'] == crop]['State'].unique()
    state_for_crop = st.selectbox("Choose State", states_for_crop.tolist() + ["All of the above"])

    if state_for_crop != "All of the above":
        # Filter data based on the selected crop and state
        filtered_data_crop = data[(data['Crop'] == crop) & (data['State'] == state_for_crop)]

        # Display data in tabular format
        st.subheader(f"Data for {crop} in {state_for_crop}")
        st.dataframe(filtered_data_crop)

        # Option to switch between tabular and graphical format
        show_graph_crop = st.checkbox("Show Graph")
        if show_graph_crop:
            st.subheader("Graphical Representation")
            fig, ax = plt.subplots()
            sns.barplot(data=filtered_data_crop, x="District", y="Area", ax=ax)
            st.pyplot(fig)
    else:
        # Filter data for all states for the selected crop
        filtered_data_crop_all_states = data[data['Crop'] == crop]

        # Display data in tabular format
        st.subheader(f"Data for {crop} across all states")
        st.dataframe(filtered_data_crop_all_states)

        # Option to switch between tabular and graphical format
        show_graph_crop_all_states = st.checkbox("Show Graph for All States")
        if show_graph_crop_all_states:
            st.subheader("Graphical Representation")
            fig, ax = plt.subplots()
            sns.barplot(data=filtered_data_crop_all_states, x="State", y="Area", ax=ax)
            st.pyplot(fig)
