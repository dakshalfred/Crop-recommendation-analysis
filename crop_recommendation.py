# -*- coding: utf-8 -*-
"""Crop_Recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1canoNUY0f0finuyqQzXf88hdWWqEQHr5
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import io
import time
import requests
from streamlit.components.v1 import html
import warnings
warnings.filterwarnings("ignore", message="missing ScriptRunContext!")

# Function to load data from Google Drive
def load_data_from_drive(link):
    try:
        # Extracting file ID from Google Drive URL
        file_id = link.split('/')[-2]
        url = f'https://drive.google.com/uc?id={file_id}'
        response = requests.get(url)
        if response.status_code == 200:
            return pd.read_csv(io.StringIO(response.text))
        else:
            st.error("Failed to load data. Please check the link.")
            return pd.DataFrame()  # Return empty dataframe in case of error
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return pd.DataFrame()

# Add a title to the app
st.title("Crop Recommendation System")

# Load dataset from Google Drive (replace with your actual link)
data_url = 'https://drive.google.com/file/d/1XYvWxsYyEKkFt7VH1roZuBMtQHH8MnvG/view?usp=drive_link'  # Replace with your Google Drive link
data = load_data_from_drive(data_url)

# Check if data is loaded
if data.empty:
    st.write("No data loaded, please check the link.")
else:
    st.write("Data loaded successfully!")

    # Image Slideshow (background)
    st.markdown(
        """
        <style>
            body {
                margin: 0;
                padding: 0;
                font-family: Arial, Helvetica, sans-serif;
            }
            .slideshow-container {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                overflow: hidden;
                z-index: -1; /* Ensures it's behind the main content */
            }
            .mySlides {
                display: none;
                position: absolute;
                width: 100%;
                height: 100%;
            }
            .mySlides img {
                width: 100%;
                height: 100%;
                object-fit: cover; /* Ensures the image fills the screen */
            }
            .fade {
                animation-name: fade;
                animation-duration: 1s; /* Smooth fade transition */
            }
            @keyframes fade {
                from {opacity: 0.4} 
                to {opacity: 1}
            }
        </style>

        <div class="slideshow-container">
            <div class="mySlides fade">
                <img src="https://drive.google.com/uc?id=1m7SMWjsST26U2pbz84TJ8SfTtC-3GrkP" alt="Image 1">
            </div>
            <div class="mySlides fade">
                <img src="https://drive.google.com/uc?id=1GYJzuUbH7-_R8B8z6CGhyxSHISH4Hapl" alt="Image 2">
            </div>
            <div class="mySlides fade">
                <img src="https://drive.google.com/uc?id=1SNgVLNTH8o9qvT-_O4NI2QGQxNNd6H5x" alt="Image 3">
            </div>
            <div class="mySlides fade">
                <img src="https://drive.google.com/uc?id=1uzESAjpQ86bQmreq0A8TQY1j2jGh4LUb" alt="Image 4">
            </div>
            <div class="mySlides fade">
                <img src="https://drive.google.com/uc?id=1kOaD8pUB7-dLTYNXATO8a1FvFyLUeNFY" alt="Image 5">
            </div>
        </div>

        <script>
            let slideIndex = 0;
            showSlides();
            
            function showSlides() {
                let slides = document.getElementsByClassName("mySlides");
                for (let i = 0; i < slides.length; i++) {
                    slides[i].style.display = "none";  
                }
                slideIndex++;
                if (slideIndex > slides.length) {slideIndex = 1}    
                slides[slideIndex-1].style.display = "block";  
                setTimeout(showSlides, 6000); // 6 seconds per slide
            }
        </script>
        """,
        unsafe_allow_html=True,
    )

    # Main interface for the Crop Recommendation System
    option = st.selectbox("Choose an option", ["Get Crop Information", "Get Region Information"])
    st.write("You selected:", option)

    # Option 1: Get Region Information (State -> District -> Season)
    if option == "Get Region Information":
        states = data['State'].unique()
        state = st.selectbox("Choose State", states)
        
        districts = data[data['State'] == state]['District'].unique()
        district = st.selectbox("Choose District", districts)
        
        seasons = data[(data['State'] == state) & (data['District'] == district)]['Season'].unique()
        season = st.selectbox("Select Season", seasons)
        
        filtered_data_region = data[(data['State'] == state) & (data['District'] == district) & (data['Season'] == season)]
        
        if not filtered_data_region.empty:
            st.subheader("Crops Information for the selected Region and Season")
            st.dataframe(filtered_data_region)

            # Option to display graph
            show_graph = st.checkbox("Show Graph")
            if show_graph:
                st.subheader("Graphical Representation")
                fig, ax = plt.subplots()
                sns.barplot(data=filtered_data_region, x="Crop", y="Area", ax=ax)
                st.pyplot(fig)
        else:
            st.write("No data available for the selected region and season.")

    # Option 2: Get Crop Information (Crop -> State)
    elif option == "Get Crop Information":
        crops = data['Crop'].unique()
        crop = st.selectbox("Choose Crop", crops)
        
        states_for_crop = data[data['Crop'] == crop]['State'].unique()
        state_for_crop = st.selectbox("Choose State", states_for_crop.tolist() + ["All of the above"])
        
        if state_for_crop != "All of the above":
            filtered_data_crop = data[(data['Crop'] == crop) & (data['State'] == state_for_crop)]
            
            if not filtered_data_crop.empty:
                st.subheader(f"Data for {crop} in {state_for_crop}")
                st.dataframe(filtered_data_crop)

                # Option to display graph
                show_graph_crop = st.checkbox("Show Graph")
                if show_graph_crop:
                    st.subheader("Graphical Representation")
                    fig, ax = plt.subplots()
                    sns.barplot(data=filtered_data_crop, x="District", y="Area", ax=ax)
                    st.pyplot(fig)
            else:
                st.write("No data available for the selected crop and state.")
        else:
            filtered_data_crop_all_states = data[data['Crop'] == crop]
            
            if not filtered_data_crop_all_states.empty:
                st.subheader(f"Data for {crop} in All States")
                st.dataframe(filtered_data_crop_all_states)

                # Option to display graph
                show_graph_crop_all_states = st.checkbox("Show Graph")
                if show_graph_crop_all_states:
                    st.subheader("Graphical Representation")
                    fig, ax = plt.subplots()
                    sns.barplot(data=filtered_data_crop_all_states, x="State", y="Area", ax=ax)
                    st.pyplot(fig)
            else:
                st.write("No data available for the selected crop in all states.")
