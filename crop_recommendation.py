# -*- coding: utf-8 -*-
"""Crop_Recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1canoNUY0f0finuyqQzXf88hdWWqEQHr5
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import io
import time
import requests
from PIL import Image
from io import BytesIO

# Streamlit title and description
st.title("Crop Recommendation System")
st.markdown(
    """
    <h1 style="text-align:center;font-size:25px;padding:20px;">
        Welcome to the Crop Recommendation Analysis tool! ðŸŒ¾  
    This app helps you determine the best crops for specific regions and seasons based on historical data.
    </h1>
    """,
    unsafe_allow_html=True,
)

# List of image URLs for background slideshow (GitHub Raw URLs)
image_urls = [
    "https://raw.githubusercontent.com/dakshalfred/Crop-recommendation-analysis/main/images/Specialization%20image(1).png",
    "https://raw.githubusercontent.com/dakshalfred/Crop-recommendation-analysis/main/images/specialization(2).jpg",
    "https://raw.githubusercontent.com/dakshalfred/Crop-recommendation-analysis/main/images/specialization(3).jpg",
    "https://raw.githubusercontent.com/dakshalfred/Crop-recommendation-analysis/main/images/specialization(4).jpg",
    "https://raw.githubusercontent.com/dakshalfred/Crop-recommendation-analysis/main/images/specialization(5).jpg",
]

# Add custom CSS and JavaScript for the background slideshow
slideshow_html = """
<style>
    body {
        margin: 0;
        padding: 0;
        font-family: Arial, Helvetica, sans-serif;
    }
    .slideshow-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: -1; /* Ensures it's behind the main content */
    }
    .mySlides {
        display: none;
        position: absolute;
        width: 100%;
        height: 100%;
    }
    .mySlides img {
        width: 100%;
        height: 100%;
        object-fit: cover; /* Ensures the image fills the screen */
    }
    .fade {
        animation-name: fade;
        animation-duration: 1s; /* Smooth fade transition */
    }
    @keyframes fade {
        from {opacity: 0.4} 
        to {opacity: 1}
    }
</style>

<div class="slideshow-container">
    <div class="mySlides fade">
        <img src="https://raw.githubusercontent.com/dakshalfred/Crop-recommendation-analysis/main/images/Specialization%20image(1).png" alt="Image 1">
    </div>
    <div class="mySlides fade">
        <img src="https://raw.githubusercontent.com/dakshalfred/Crop-recommendation-analysis/main/images/specialization(2).jpg" alt="Image 2">
    </div>
    <div class="mySlides fade">
        <img src="https://raw.githubusercontent.com/dakshalfred/Crop-recommendation-analysis/main/images/specialization(3).jpg" alt="Image 3">
    </div>
    <div class="mySlides fade">
        <img src="https://raw.githubusercontent.com/dakshalfred/Crop-recommendation-analysis/main/images/specialization(4).jpg" alt="Image 4">
    </div>
    <div class="mySlides fade">
        <img src="https://raw.githubusercontent.com/dakshalfred/Crop-recommendation-analysis/main/images/specialization(5).jpg" alt="Image 5">
    </div>
</div>

<script>
    let slideIndex = 0;
    showSlides();

    function showSlides() {
        let slides = document.getElementsByClassName("mySlides");
        for (let i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";  
        }
        slideIndex++;
        if (slideIndex > slides.length) {slideIndex = 1}    
        slides[slideIndex-1].style.display = "block";  
        setTimeout(showSlides, 6000); // 6 seconds per slide
    }
</script>
"""

# Embed the HTML for the slideshow
st.markdown(slideshow_html, unsafe_allow_html=True)

# Add the rest of your code for crop recommendation functionality
option = st.selectbox("Choose an option", ["Get Crop Information", "Get Region Information"])
st.write("Your selected option is:", option)

# Function to load data from Google Drive link
def load_data_from_drive(link):
    file_id = link.split('/')[-2]
    url = f'https://drive.google.com/uc?id={file_id}'
    response = requests.get(url)
    return pd.read_csv(io.StringIO(response.text))

# Load dataset (Google Drive URL)
data_url = 'https://drive.google.com/file/d/1XYvWxsYyEKkFt7VH1roZuBMtQHH8MnvG/view?usp=drive_link'
data = load_data_from_drive(data_url)

# Data preprocessing
data.dropna(subset=['Crop', 'Production', 'Area'], inplace=True)

# Option 1: Get Region Information
if option == "Get Region Information":
    states = data['State'].unique()
    state = st.selectbox("Choose State", states)
    districts = data[data['State'] == state]['District'].unique()
    district = st.selectbox("Choose District", districts)
    seasons = data[(data['State'] == state) & (data['District'] == district)]['Season'].unique()
    season = st.selectbox("Select Season", seasons)

    filtered_data_region = data[(data['State'] == state) & (data['District'] == district) & (data['Season'] == season)]
    st.subheader("Crops Information for the selected Region and Season")
    st.dataframe(filtered_data_region)

    # Option to show graph
    show_graph = st.checkbox("Show Graph")
    if show_graph:
        st.subheader("Graphical Representation")
        fig, ax = plt.subplots()
        sns.barplot(data=filtered_data_region, x="Crop", y="Area", ax=ax)
        st.pyplot(fig)

# Option 2: Get Crop Information
elif option == "Get Crop Information":
    crops = data['Crop'].unique()
    crop = st.selectbox("Choose Crop", crops)
    states_for_crop = data[data['Crop'] == crop]['State'].unique()
    state_for_crop = st.selectbox("Choose State", states_for_crop.tolist() + ["All of the above"])

    if state_for_crop != "All of the above":
        filtered_data_crop = data[(data['Crop'] == crop) & (data['State'] == state_for_crop)]
        st.subheader(f"Data for {crop} in {state_for_crop}")
        st.dataframe(filtered_data_crop)

        # Option to show graph
        show_graph_crop = st.checkbox("Show Graph")
        if show_graph_crop:
            st.subheader("Graphical Representation")
            fig, ax = plt.subplots()
            sns.barplot(data=filtered_data_crop, x="District", y="Area", ax=ax)
            st.pyplot(fig)
