# -*- coding: utf-8 -*-
"""Crop_Recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1canoNUY0f0finuyqQzXf88hdWWqEQHr5
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Title of the app
st.title("AgriSmart")

# Add custom HTML for title and description
st.markdown(
    """
    <h1 style="text-align:center;font-size:25px;padding:20px;">
        Welcome to the Crop Recommendation Analysis tool! ðŸŒ¾  
        This app helps you determine the best crops for specific regions and seasons based on historical data.
    </h1>
    """,
    unsafe_allow_html=True,
)

# Add background image and semi-transparent overlay
st.markdown(
    """
    <style>
    .stApp {
        background-image: url('https://github.com/dakshalfred/Crop-recommendation-analysis/raw/main/images/specialization(2).jpg');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        background-repeat: no-repeat;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# Function to load data directly from Google Drive using file ID
@st.cache_data
def load_data_from_drive(file_id):
    url = f"https://drive.google.com/uc?id={file_id}"
    try:
        data = pd.read_csv(url)
        return data
    except Exception as e:
        st.error(f"Error loading dataset: {e}")
        return None

# Dataset Google Drive ID
file_id = "1Im5rH0zhhyy--aSDxHnaf7jNjWNBQE7G"  # Replace with your file ID
data = load_data_from_drive(file_id)

# Validate dataset loading and columns
if data is not None:
    if 'Crop' in data.columns and 'State' in data.columns and 'District' in data.columns:
        # Drop missing values in critical columns
        data.dropna(subset=['Crop', 'State', 'District'], inplace=True)
    else:
        st.error("Required columns ('Crop', 'State', 'District') are missing in the dataset.")
        st.stop()
else:
    st.error("Failed to load dataset.")
    st.stop()

# Dropdown to select options
option = st.selectbox("Choose an option", ["Get Crop Information", "Get Region Information"])
st.write(f"Your selected option is: {option}")

# Option 1: Get Region Information
if option == "Get Region Information":
    states = data['State'].unique()
    state = st.selectbox("Choose State", states)
    districts = data[data['State'] == state]['District'].unique()
    district = st.selectbox("Choose District", districts)
    seasons = data[(data['State'] == state) & (data['District'] == district)]['Season'].unique()
    season = st.selectbox("Select Season", seasons)

    filtered_data_region = data[
        (data['State'] == state) & (data['District'] == district) & (data['Season'] == season)
    ]
    st.subheader("Crops Information for the selected Region and Season")
    st.dataframe(filtered_data_region)

    if st.checkbox("Show Graph"):
        num_crops_to_display = st.slider("Select the number of crops to display", 5, 50, 10)
        filtered_data_region_limited = filtered_data_region.head(num_crops_to_display)
        fig, ax = plt.subplots(figsize=(12, 8))
        sns.barplot(data=filtered_data_region_limited, x="Crop", y="Area", ax=ax)
        plt.xticks(rotation=90)
        st.pyplot(fig)

# Option 2: Get Crop Information
elif option == "Get Crop Information":
    crops = data['Crop'].unique()
    crop = st.selectbox("Choose Crop", crops)
    states_for_crop = data[data['Crop'] == crop]['State'].unique()
    state_for_crop = st.selectbox("Choose State", ["All of the above"] + list(states_for_crop))

    if state_for_crop == "All of the above":
        filtered_data_crop = data[data['Crop'] == crop]
    else:
        filtered_data_crop = data[(data['Crop'] == crop) & (data['State'] == state_for_crop)]

    st.subheader(f"Data for {crop} ({state_for_crop if state_for_crop != 'All of the above' else 'All States'})")
    st.dataframe(filtered_data_crop)

    if st.checkbox("Show Graph"):
        num_districts_to_display = st.slider("Select the number of districts to display", 5, 50, 10)
        filtered_data_crop_limited = filtered_data_crop.head(num_districts_to_display)
        fig, ax = plt.subplots(figsize=(12, 8))
        sns.barplot(data=filtered_data_crop_limited, x="District", y="Area", ax=ax)
        plt.xticks(rotation=90)
        st.pyplot(fig)
