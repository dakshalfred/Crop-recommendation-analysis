# -*- coding: utf-8 -*-
"""Crop_Recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1canoNUY0f0finuyqQzXf88hdWWqEQHr5
"""

import streamlit as st
import requests
import pandas as pd
import io
import matplotlib.pyplot as plt
import seaborn as sns

# Title of the app
st.title("AgriSmart")

# Add custom HTML for title and description
st.markdown(
    """
    <h1 style="text-align:center;font-size:25px;padding:20px;">
        Welcome to the Crop Recommendation Analysis tool! ðŸŒ¾  
    This app helps you determine the best crops for specific regions and seasons based on historical data.
    </h1>
    """,
    unsafe_allow_html=True,
)

# Add background image and semi-transparent overlay behind the text
st.markdown(
    """
    <style>
    .stApp {
        background-image: url('https://github.com/dakshalfred/Crop-recommendation-analysis/raw/main/images/specialization(2).jpg');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        background-repeat: no-repeat;
    }
    .stApp::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.3);
        z-index: 0;
    }
    .main-content {
        position: relative;
        z-index: 1;
        color: black;
        padding: 20px;
        border-radius: 10px;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

st.markdown('<div class="main-content">', unsafe_allow_html=True)

# Dropdown for options
option = st.selectbox("Choose an option", ["Get Crop Information", "Get Region Information"])
st.write("Your selected option is:", option)

# Function to load data from Google Drive link
def load_data_from_drive(link):
    try:
        file_id = link.split('/')[-2]
        url = f'https://drive.google.com/uc?id={file_id}'
        response = requests.get(url)
        response.raise_for_status()
        return pd.read_csv(io.StringIO(response.text))
    except Exception as e:
        st.error(f"Error loading dataset: {e}")
        return pd.DataFrame()

# Load dataset
data_url = 'https://drive.google.com/file/d/1Im5rH0zhhyy--aSDxHnaf7jNjWNBQE7G/view?usp=drive_link'
data = load_data_from_drive(data_url)

# Data Preprocessing
if not data.empty:
    data.columns = data.columns.str.strip()  # Clean up column names
    required_columns = ['Crop', 'State', 'District', 'Season', 'Area', 'Production']
    missing_columns = [col for col in required_columns if col not in data.columns]

    if missing_columns:
        st.warning(f"The following required columns are missing: {', '.join(missing_columns)}")
    else:
        data.dropna(subset=required_columns, inplace=True)  # Drop rows with missing important columns

        # Option 1: Get Region Information
        if option == "Get Region Information":
            states = data['State'].unique()
            state = st.selectbox("Choose State", states)

            districts = data[data['State'] == state]['District'].unique()
            district = st.selectbox("Choose District", districts)

            seasons = data[(data['State'] == state) & (data['District'] == district)]['Season'].unique()
            season = st.selectbox("Select Season", seasons)

            filtered_data_region = data[
                (data['State'] == state) &
                (data['District'] == district) &
                (data['Season'] == season)
            ]
            st.subheader("Crops Information for the selected Region and Season")
            st.dataframe(filtered_data_region)

            if st.checkbox("Show Graph"):
                fig, ax = plt.subplots(figsize=(12, 8))
                sns.barplot(data=filtered_data_region, x="Crop", y="Area", ax=ax)
                plt.xticks(rotation=90)
                st.pyplot(fig)

        # Option 2: Get Crop Information
        elif option == "Get Crop Information":
            crops = data['Crop'].unique()
            crop = st.selectbox("Choose Crop", crops)

            states_for_crop = data[data['Crop'] == crop]['State'].unique()
            state_for_crop = st.selectbox("Choose State", ["All States"] + states_for_crop.tolist())

            if state_for_crop == "All States":
                filtered_data_crop = data[data['Crop'] == crop]
            else:
                filtered_data_crop = data[(data['Crop'] == crop) & (data['State'] == state_for_crop)]

            st.subheader(f"Data for {crop} in {state_for_crop}")
            st.dataframe(filtered_data_crop)

            if st.checkbox("Show Graph"):
                fig, ax = plt.subplots(figsize=(12, 8))
                sns.barplot(data=filtered_data_crop, x="District", y="Area", ax=ax)
                plt.xticks(rotation=90)
                st.pyplot(fig)
else:
    st.error("Failed to load or process the dataset. Please check the dataset link or format.")

